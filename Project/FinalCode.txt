#include <stdlib.h>
#include <stdio.h>
#include "system.h"
#include <altera_up_sd_card_avalon_interface.h>
#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_regs.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"
#include "io.h"
#include <system.h>
#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"

#define ledg ((volatile long *) 0x81400) //ledg is a pointer here that allows you to not have to write to the register 0x81400 location directly



//int i = 0;
//int a = 0;

int main(void)
{
	alt_up_sd_card_dev *sd_card_dev;
	short int FindFile;
	short int OpenFile;
	short int read;
	int c;

	char filename[13] = "FANCY.txt";
	char CharRead;
 	int x = 1;
 	int y = 1;

	alt_up_char_buffer_dev * vga_dev;


		    // open the VGA port
		    	vga_dev = alt_up_char_buffer_open_dev("/dev/char_buffer");

		    	if (vga_dev == NULL)
		    	printf("Error: could not open VGA device \n");
		    	else
		    	printf("Opened VGA device \n");


	//////////////////////////////////////////////SD_CARD//////////////////////////////////////////////////////////////
int connected = 0;

sd_card_dev = alt_up_sd_card_open_dev("/dev/sd_card");

if (sd_card_dev == NULL)
	{
		printf("Error: could not open SD Card device \n");
	}
else
	{
     	printf("Opened SD Card device \n");
       	IOWR_ALT_UP_PARALLEL_PORT_DATA(ledg, 0xFF);

       	if ((connected == 0) && (alt_up_sd_card_is_Present()))
           {
            	printf("Card connected.\n");
            		if (alt_up_sd_card_is_FAT16())
            			{
            			alt_up_char_buffer_clear(vga_dev);
            				printf("FAT16 file system detected.\n");

            				FindFile = alt_up_sd_card_find_first("./", filename);
                        	printf("File Found 1: %d \n",FindFile);
                        	FindFile = alt_up_sd_card_find_next(filename);
                        	printf("File Found 2: %d \n",FindFile);
                        	OpenFile = alt_up_sd_card_fopen(filename, false);
                        	printf("Open File: %d \n", OpenFile);

                       		while(1)//read != -1
                        	{
                       			x = 0;
								for(x; x <= 60; x++)
								{

									read = alt_up_sd_card_read(OpenFile); //read first character from file
									printf("read File: %c \n", read);
									CharRead = (char) read;
									char aa[2] = {CharRead, '\0'};
									char hw[5] = ""; //convert character to string
									strcpy(hw,aa);
									x = x;
									y = y;
									if(read != -1) //check for end of file
									{
										alt_up_char_buffer_string(vga_dev, hw, x, y);
									//alt_up_char_buffer_clear(vga_dev);
									}
									else
									{
										//alt_up_char_buffer_clear(vga_dev);
										return 0;
									}
								}

								 y = y + 1;
                        	}

            			}
            		else
            			{
            				printf("Unknown file system.\n");
            			}
            				connected = 1;
         }
else if ((connected == 1) && (alt_up_sd_card_is_Present() == false))
        {
        	printf("Card disconnected.\n");
           connected = 0;
       }

}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////AUDIO/////////////////////////////////////////////////////////////

alt_up_audio_dev * audio_dev;

	 //used for audio record/playback
	unsigned int l_buf;
	unsigned int r_buf;


	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/audio");

	if ( audio_dev == NULL)
	printf("Error: could not open audio device \n");
	else
	printf("Opened audio device \n");
	// read and echo audio data
	while(1)
	{
	int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);
	if ( fifospace > 0 ) // check if data is available
	{
	// read audio buffer
	alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
	alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
	// write audio buffer
	alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
	alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
	}
	}

}

